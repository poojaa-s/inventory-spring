package com.mph.mytest;

import java.text.SimpleDateFormat;

import org.hamcrest.Matcher;
import org.hamcrest.Matchers;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;


import com.mph.controller.UsersController;


import com.mph.entity.Users;
import com.mph.service.UsersService;


@WebMvcTest(value =UsersController.class)
@ContextConfiguration(classes = {UsersController.class})
@AutoConfigureMockMvc
public class UsersTest {
	private static final Matcher pass = null;
	private MockMvc mockMvc;
    @InjectMocks
    UsersController UsersController;
    
    @Mock
    UsersService UsersService;

    @Before
    public void setUp(){
    	MockitoAnnotations.initMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(UsersController)
                .build();
    }
    @Test
    public void testgetUser() throws Exception{
    	/*SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
    	java.util.Date myDate = new java.util.Date("2009-10-10");
    	java.sql.Date date = new java.sql.Date(myDate.getTime());
    	  */
    	
        Users  l = new Users(1,"pihu","pass");
        Mockito.when(UsersService.getUsersById(1)).thenReturn(l);
        mockMvc.perform(MockMvcRequestBuilders.get("/users/userById/1")
        .accept(MediaType.APPLICATION_JSON))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.userId", Matchers.is(1)))
                .andExpect(MockMvcResultMatchers.jsonPath("$.Name",Matchers.is("pihu")))
                .andExpect(MockMvcResultMatchers.jsonPath("$.password",Matchers.is(pass)));
        
                
                
        Mockito.verify(UsersService).getUsersById(1);
    }

}
